import numpy as np
import cv2 as cv
import glob
# Based on an OpenCV tutorial:
# https://docs.opencv.org/4.5.2/dc/dbb/tutorial_py_calibration.html
# Calibration image: https://www.researchgate.net/figure/Calibration-Boards-a-Opencv-9-6-checkerboard-b-Opencv-asymmetric-circle_fig1_330317635
# Images c1.jpg, c2.jpg, ... generated by displaying on the monitor and moving the camera Logitech C270
# Code: Adjusted for calibration checkboard and parametrized: w, h ...
# The image suggests 9-6 but it works with 9-7; 9-6 recognizes nothing
# By Twenkid, 18-19.8.2021

# termination criteria
criteria = (cv.TERM_CRITERIA_EPS + cv.TERM_CRITERIA_MAX_ITER, 30, 0.001)
# prepare object points, like (0,0,0), (1,0,0), (2,0,0) ....,(6,5,0)
w = 9; h = 7 #was 7, 6
#objp = np.zeros((6*7,3), np.float32)
objp = np.zeros((h*w,3), np.float32)
#objp[:,:2] = np.mgrid[0:7,0:6].T.reshape(-1,2)
objp[:,:2] = np.mgrid[0:w,0:h].T.reshape(-1,2)
# Arrays to store object points and image points from all the images.
objpoints = [] # 3d point in real world space
imgpoints = [] # 2d points in image plane.
images = glob.glob('*.jpg')
n = 0
for fname in images:
    print(fname)
    img = cv.imread(fname)
    gray = cv.cvtColor(img, cv.COLOR_BGR2GRAY)
    # Find the chess board corners
    #ret, corners = cv.findChessboardCorners(gray, (9, 7), None)
    ret, corners = cv.findChessboardCorners(gray, (w, h), None)
    #ret, corners = cv.findChessboardCorners(gray, (10,10), None)
    # If found, add object points, image points (after refining them)
    if ret == True:
        print("FOUND: ", fname)
        objpoints.append(objp)
        #corners2 = cv.cornerSubPix(gray,corners, (11,11), (-1,-1), criteria)
        #corners2 = cv.cornerSubPix(gray,corners, (9,7), (-1,-1), criteria)
        corners2 = cv.cornerSubPix(gray,corners, (w,h), (-1,-1), criteria)
        imgpoints.append(corners)
        # Draw and display the corners
        #cv.drawChessboardCorners(img, (7,6), corners2, ret)
        #cv.drawChessboardCorners(img, (9,7), corners2, ret)
        cv.drawChessboardCorners(img, (w,h), corners2, ret)
        cv.imshow('img'+str(n), img)
        cv.waitKey(1) #for showing the images
        n+=1
#cv.destroyAllWindows()

ret, mtx, dist, rvecs, tvecs = cv.calibrateCamera(objpoints, imgpoints, gray.shape[::-1], None, None)

img = cv.imread('c3.jpg')
h,  w = img.shape[:2]
newcameramtx, roi = cv.getOptimalNewCameraMatrix(mtx, dist, (w,h), 1, (w,h))

# undistort
dst = cv.undistort(img, mtx, dist, None, newcameramtx)
# crop the image
x, y, w, h = roi
dst = dst[y:y+h, x:x+w]
cv.imwrite('calibresult.jpg', dst)


# undistort
mapx, mapy = cv.initUndistortRectifyMap(mtx, dist, None, newcameramtx, (w,h), 5)
dst = cv.remap(img, mapx, mapy, cv.INTER_LINEAR)
# crop the image
x, y, w, h = roi
dst = dst[y:y+h, x:x+w]
cv.imwrite('calibre_remap.png', dst)

mean_error = 0
for i in range(len(objpoints)):
    imgpoints2, _ = cv.projectPoints(objpoints[i], rvecs[i], tvecs[i], mtx, dist)
    error = cv.norm(imgpoints[i], imgpoints2, cv.NORM_L2)/len(imgpoints2)
    mean_error += error
print( "total error: {}".format(mean_error/len(objpoints)) )

print("Press a key")
cv.waitKey()
cv.destroyAllWindows()
